#include <iostream>
#include <stdio.h>
#include <fstream>
#include <string>
using namespace std;
struct TNode_Text
{
	char A[40096];
	int freq;
	TNode_Text* TRight;
	TNode_Text* TLeft;
};
struct TNode_Image
{
	char* A;
	int freq;
	TNode_Image* TRight;
	TNode_Image* TLeft;
	int img_limit = 0;
};
struct CNode_Text
{
	char A[40096];
	int freq;
	CNode_Text* PNext;
	TNode_Text* Tree_Friend;
};
struct CNode_Image
{
	char* A;
	int freq;
	CNode_Image* PNext;
	TNode_Image* Tree_Friend;
	int img_limit = 0;
};
struct CNFreq_Text
{
	int Binary[40096];
	char Char;
	int count;
	CNFreq_Text* pnext;
};
struct CNFreq_Image
{
	int* Binary;
	char Char;
	int count;
	CNFreq_Image* pnext;
};
struct CList2_Text
{
	CNFreq_Text* PHead;
	CNFreq_Text* PTail;
	CList2_Text()
	{
		PHead = NULL;
		PTail = NULL;
	}
	void Attach(CNFreq_Text* pnn)
	{
		if (PHead == NULL)
		{
			PHead = pnn;
			PTail = pnn;
		}
		else
		{
			PTail->pnext = pnn;
			PTail = pnn;
		}
	}
	~CList2_Text()
	{
		CNFreq_Text* Ptemp;
		CNFreq_Text* Ptrav = PHead;
		while (Ptrav != NULL)
		{
			Ptemp = Ptrav->pnext;
			delete Ptrav;
			Ptrav = Ptemp;
		}
	}
	void Dispall()
	{
		CNFreq_Text* ptrav;
		ptrav = PHead;
		cout << "Encoded Characters: " << endl;
		while (ptrav != NULL)
		{
			cout << "[" << ptrav->Char << " , ";
			for (int i = 0; i < ptrav->count; i++)
			{
				cout << ptrav->Binary[i];
			}
			cout << "]";
			cout << endl;
			ptrav = ptrav->pnext;

		}
		cout << endl;
	}
};
struct CList2_Image
{
	CNFreq_Image* PHead;
	CNFreq_Image* PTail;
	CList2_Image()
	{
		PHead = NULL;
		PTail = NULL;
	}
	void Attach(CNFreq_Image* pnn)
	{
		if (PHead == NULL)
		{
			PHead = pnn;
			PTail = pnn;
		}
		else
		{
			PTail->pnext = pnn;
			PTail = pnn;
		}
	}
	~CList2_Image()
	{
		CNFreq_Image* Ptemp;
		CNFreq_Image* Ptrav = PHead;
		while (Ptrav != NULL)
		{
			Ptemp = Ptrav->pnext;
			delete Ptrav;
			Ptrav = Ptemp;
		}
	}
	void Dispall()
	{
		CNFreq_Image* ptrav;
		ptrav = PHead;
		cout << "Encoded Characters: " << endl;
		while (ptrav != NULL)
		{
			cout << "[" << ptrav->Char << " , ";
			for (int i = 0; i < ptrav->count; i++)
			{
				cout << ptrav->Binary[i];
			}
			cout << "]";
			cout << endl;
			ptrav = ptrav->pnext;

		}
		cout << endl;
	}
};
struct CList_Text
{
	CNode_Text* PHead;
	CNode_Text* PTail;
	CList_Text()
	{
		PHead = NULL;
		PTail = NULL;
	}
	void Attach(CNode_Text* pnn)
	{
		if (PHead == NULL)
		{
			PHead = pnn;
			PTail = pnn;
		}
		else
		{
			PTail->PNext = pnn;
			PTail = pnn;
		}
	}
	~CList_Text()
	{
		CNode_Text* Ptemp;
		CNode_Text* Ptrav = PHead;
		while (Ptrav != NULL)
		{
			Ptemp = Ptrav->PNext;
			delete Ptrav;
			Ptrav = Ptemp;
		}
	}
	void Dispall()
	{
		CNode_Text* ptrav;
		ptrav = PHead;
		while (ptrav != NULL)
		{
			cout << " [ " << ptrav->freq << " - " << ptrav->A << " ] ";
			ptrav = ptrav->PNext;

		}
		cout << endl;
	}
	void Sort_List()
	{
		CNode_Text* ptrav1 = PHead, * ptrav2 = ptrav1->PNext;
		CNode_Text* pback1 = ptrav1, * pback2 = ptrav2;
		while (ptrav1->PNext != NULL)
		{
			pback2 = ptrav1;
			ptrav2 = ptrav1->PNext;
			while (ptrav2 != NULL)
			{
				if (ptrav1->freq > ptrav2->freq)
				{
					if (ptrav1 == PHead)
					{
						PHead = ptrav2;
						pback2->PNext = ptrav2->PNext;
						ptrav2->PNext = ptrav1;
						ptrav1 = ptrav2;
					}
					else
					{
						if (PTail == ptrav2)
						{
							PTail = pback2;
						}
						pback1->PNext = ptrav2;
						pback2->PNext = ptrav2->PNext;
						ptrav2->PNext = ptrav1;
						ptrav1 = ptrav2;

					}
				}

				pback2 = ptrav2;
				ptrav2 = ptrav2->PNext;
			}
			pback1 = ptrav1;
			ptrav1 = ptrav1->PNext;
		}
	}
};
struct CList_Image
{
	CNode_Image* PHead;
	CNode_Image* PTail;
	CList_Image()
	{
		PHead = NULL;
		PTail = NULL;
	}
	void Attach(CNode_Image* pnn)
	{
		if (PHead == NULL)
		{
			PHead = pnn;
			PTail = pnn;
		}
		else
		{
			PTail->PNext = pnn;
			PTail = pnn;
		}
	}
	~CList_Image()
	{
		CNode_Image* Ptemp;
		CNode_Image* Ptrav = PHead;
		while (Ptrav != NULL)
		{
			Ptemp = Ptrav->PNext;
			delete Ptrav;
			Ptrav = Ptemp;
		}
	}
	void Dispall()
	{
		CNode_Image* ptrav;
		ptrav = PHead;
		while (ptrav != NULL)
		{
			for (int i = 0; i < ptrav->img_limit; i++)
			{
				cout << " [" << ptrav->A[i];
			}
			cout << " , " << ptrav->freq << "] ";
			cout << endl;
			ptrav = ptrav->PNext;
		}

	}
	void Sort_List()
	{
		CNode_Image* ptrav1 = PHead, * ptrav2 = ptrav1->PNext;
		CNode_Image* pback1 = ptrav1, * pback2 = ptrav2;
		while (ptrav1->PNext != NULL)
		{
			pback2 = ptrav1;
			ptrav2 = ptrav1->PNext;
			while (ptrav2 != NULL)
			{
				if (ptrav1->freq > ptrav2->freq)
				{
					if (ptrav1 == PHead)
					{
						PHead = ptrav2;
						pback2->PNext = ptrav2->PNext;
						ptrav2->PNext = ptrav1;
						ptrav1 = ptrav2;
					}
					else
					{
						if (PTail == ptrav2)
						{
							PTail = pback2;
						}
						pback1->PNext = ptrav2;
						pback2->PNext = ptrav2->PNext;
						ptrav2->PNext = ptrav1;
						ptrav1 = ptrav2;

					}
				}

				pback2 = ptrav2;
				ptrav2 = ptrav2->PNext;
			}
			pback1 = ptrav1;
			ptrav1 = ptrav1->PNext;
		}
	}
};
struct CTree_Text
{
	TNode_Text* PRoot;
	CTree_Text()
	{
		PRoot = NULL;
	}
	void Insert(TNode_Text* pnn)
	{
		if (PRoot == NULL)
		{
			PRoot = pnn;
		}
		else
		{
			TNode_Text* PBack = NULL;
			TNode_Text* PTrav = PRoot;
			while (PTrav != NULL)
			{
				PBack = PTrav;
				if (pnn->freq > PTrav->freq)
				{
					PTrav = PTrav->TRight;
				}
				else
				{
					PTrav = PTrav->TLeft;
				}
			}
			if (pnn->freq > PBack->freq)
			{
				PBack->TRight = pnn;
			}
			else
			{
				PBack->TLeft = pnn;
			}
		}
	}
	void DispTree(TNode_Text* Ptrav)
	{
		if (Ptrav == NULL)
		{
			return;
		}
		DispTree(Ptrav->TLeft);
		cout << Ptrav->A << endl;
		cout << Ptrav->freq << endl;
		DispTree(Ptrav->TRight);
	}
	void Dispall_Tree()
	{
		DispTree(PRoot);
	}
	void Delete(TNode_Text* ptrav)
	{
		if (ptrav == NULL)
		{
			return;
		}
		Delete(ptrav->TLeft);
		Delete(ptrav->TRight);
		delete ptrav;
	}
	~CTree_Text()
	{
		Delete(PRoot);
	}
};
struct CTree_Image
{
	TNode_Image* PRoot;
	CTree_Image()
	{
		PRoot = NULL;
	}
	void Insert(TNode_Image* pnn)
	{
		if (PRoot == NULL)
		{
			PRoot = pnn;
		}
		else
		{
			TNode_Image* PBack = NULL;
			TNode_Image* PTrav = PRoot;
			while (PTrav != NULL)
			{
				PBack = PTrav;
				if (pnn->freq > PTrav->freq)
				{
					PTrav = PTrav->TRight;
				}
				else
				{
					PTrav = PTrav->TLeft;
				}
			}
			if (pnn->freq > PBack->freq)
			{
				PBack->TRight = pnn;
			}
			else
			{
				PBack->TLeft = pnn;
			}
		}
	}
	void DispTree(TNode_Image* Ptrav)
	{
		if (Ptrav == NULL)
		{
			return;
		}
		DispTree(Ptrav->TLeft);
		for (int i = 0; i < Ptrav->img_limit; i++)
		{
			cout << Ptrav->A[i];
		}
		cout << endl << Ptrav->freq << endl;
		DispTree(Ptrav->TRight);
	}
	void Dispall_Tree()
	{
		DispTree(PRoot);
	}
	void Delete(TNode_Image* ptrav)
	{
		if (ptrav == NULL)
		{
			return;
		}
		Delete(ptrav->TLeft);
		Delete(ptrav->TRight);
		delete ptrav;
	}
	~CTree_Image()
	{
		Delete(PRoot);
	}
};
void Merge_Text(CList_Text& L, CTree_Text& T)
{
	CNode_Text* pnn, * ptrav, * ptemp;
	TNode_Text* Root_curr;
	int tmp = 0;
	ptrav = L.PHead;
	while (ptrav->PNext != NULL)
	{
		pnn = new CNode_Text;
		tmp = 0;
		for (int i = 0;ptrav->A[i] != '\0';i++)
		{
			pnn->A[tmp] = ptrav->A[i];
			tmp++;
		}
		for (int j = 0;ptrav->PNext->A[j] != '\0';j++)
		{
			pnn->A[tmp] = ptrav->PNext->A[j];
			tmp++;
		}
		pnn->A[tmp] = '\0';
		pnn->freq = ptrav->freq + ptrav->PNext->freq;
		pnn->PNext = NULL;
		Root_curr = new TNode_Text;
		for (int i = 0;;i++)
		{
			Root_curr->A[i] = pnn->A[i];
			if (pnn->A[i] == '\0')
			{
				break;
			}
		}
		Root_curr->freq = pnn->freq;
		Root_curr->TLeft = NULL;
		Root_curr->TRight = NULL;
		T.Insert(Root_curr);
		if (ptrav->Tree_Friend == NULL && ptrav->PNext->Tree_Friend == NULL)
		{
			Root_curr = new TNode_Text;
			for (int i = 0; ;i++)
			{
				Root_curr->A[i] = ptrav->A[i];
				if (ptrav->A[i] == '\0')
				{
					break;
				}
			}
			Root_curr->freq = ptrav->freq;
			Root_curr->TLeft = NULL;
			Root_curr->TRight = NULL;
			T.PRoot->TLeft = Root_curr;

			Root_curr = new TNode_Text;
			for (int i = 0; ;i++)
			{
				Root_curr->A[i] = ptrav->PNext->A[i];
				if (ptrav->PNext->A[i] == '\0')
				{
					break;
				}
			}
			Root_curr->freq = ptrav->PNext->freq;
			Root_curr->TLeft = NULL;
			Root_curr->TRight = NULL;
			T.PRoot->TRight = Root_curr;
		}
		if (ptrav->Tree_Friend != NULL && ptrav->PNext->Tree_Friend != NULL)
		{
			T.PRoot->TRight = ptrav->PNext->Tree_Friend;
			T.PRoot->TLeft = ptrav->Tree_Friend;
		}
		if (ptrav->Tree_Friend == NULL && ptrav->PNext->Tree_Friend != NULL)
		{
			Root_curr = new TNode_Text;
			for (int i = 0; ;i++)
			{
				Root_curr->A[i] = ptrav->A[i];
				if (ptrav->A[i] == '\0')
				{
					break;
				}
			}
			Root_curr->freq = ptrav->freq;
			Root_curr->TLeft = NULL;
			Root_curr->TRight = NULL;
			T.PRoot->TLeft = Root_curr;
			T.PRoot->TRight = ptrav->PNext->Tree_Friend;
		}
		if (ptrav->Tree_Friend != NULL && ptrav->PNext->Tree_Friend == NULL)
		{
			Root_curr = new TNode_Text;
			for (int i = 0; ;i++)
			{
				Root_curr->A[i] = ptrav->PNext->A[i];
				if (ptrav->PNext->A[i] == '\0')
				{
					break;
				}
			}
			Root_curr->freq = ptrav->PNext->freq;
			Root_curr->TLeft = NULL;
			Root_curr->TRight = NULL;
			T.PRoot->TRight = Root_curr;
			T.PRoot->TLeft = ptrav->Tree_Friend;
		}
		pnn->Tree_Friend = T.PRoot;
		T.PRoot = NULL;
		L.Attach(pnn);
		L.Sort_List();
		ptemp = ptrav;
		ptrav = ptrav->PNext->PNext;
		L.PHead = ptrav;
		delete ptemp->PNext;
		delete ptemp;
		//L.Dispall();
	}
}
void Merge_Image(CList_Image& L, int& byte_ct, CTree_Image& T)
{
	CNode_Image* pnn, * ptrav, * ptemp;
	TNode_Image* Root_curr;
	int tmp = 0;
	ptrav = L.PHead;
	while (ptrav->PNext != NULL)
	{
		pnn = new CNode_Image;
		pnn->A = new char[byte_ct];
		tmp = 0;
		for (int i = 0; i < ptrav->img_limit; i++)
		{
			pnn->A[tmp] = ptrav->A[i];
			tmp++;
		}
		for (int j = 0; j < ptrav->PNext->img_limit; j++)
		{
			pnn->A[tmp] = ptrav->PNext->A[j];
			tmp++;
		}
		pnn->img_limit = tmp;
		pnn->freq = ptrav->freq + ptrav->PNext->freq;
		pnn->PNext = NULL;
		Root_curr = new TNode_Image;
		Root_curr->A = new char[byte_ct];
		for (int i = 0; i < pnn->img_limit; i++)
		{
			Root_curr->A[i] = pnn->A[i];
		}
		Root_curr->img_limit = pnn->img_limit;
		Root_curr->freq = pnn->freq;
		Root_curr->TLeft = NULL;
		Root_curr->TRight = NULL;
		T.Insert(Root_curr);
		if (ptrav->Tree_Friend == NULL && ptrav->PNext->Tree_Friend == NULL)
		{
			Root_curr = new TNode_Image;
			Root_curr->A = new char[byte_ct];
			Root_curr->img_limit = ptrav->img_limit;
			for (int i = 0; i < ptrav->img_limit; i++)
			{
				Root_curr->A[i] = ptrav->A[i];
			}
			Root_curr->freq = ptrav->freq;
			Root_curr->TLeft = NULL;
			Root_curr->TRight = NULL;
			T.PRoot->TLeft = Root_curr;
			Root_curr = new TNode_Image;
			Root_curr->A = new char[byte_ct];
			Root_curr->img_limit = ptrav->PNext->img_limit;
			for (int i = 0; i < ptrav->PNext->img_limit; i++)
			{
				Root_curr->A[i] = ptrav->PNext->A[i];
			}
			Root_curr->freq = ptrav->PNext->freq;
			Root_curr->TLeft = NULL;
			Root_curr->TRight = NULL;
			T.PRoot->TRight = Root_curr;
		}
		if (ptrav->Tree_Friend != NULL && ptrav->PNext->Tree_Friend != NULL)
		{
			T.PRoot->TRight = ptrav->PNext->Tree_Friend;
			T.PRoot->TLeft = ptrav->Tree_Friend;
		}
		if (ptrav->Tree_Friend == NULL && ptrav->PNext->Tree_Friend != NULL)
		{
			Root_curr = new TNode_Image;
			Root_curr->A = new char[byte_ct];
			Root_curr->img_limit = ptrav->img_limit;
			for (int i = 0; i < ptrav->img_limit; i++)
			{
				Root_curr->A[i] = ptrav->A[i];
			}
			Root_curr->freq = ptrav->freq;
			Root_curr->TLeft = NULL;
			Root_curr->TRight = NULL;
			T.PRoot->TLeft = Root_curr;
			T.PRoot->TRight = ptrav->PNext->Tree_Friend;
		}
		if (ptrav->Tree_Friend != NULL && ptrav->PNext->Tree_Friend == NULL)
		{
			Root_curr = new TNode_Image;
			Root_curr->A = new char[byte_ct];
			Root_curr->img_limit = ptrav->PNext->img_limit;
			for (int i = 0; i < ptrav->PNext->img_limit; i++)
			{
				Root_curr->A[i] = ptrav->PNext->A[i];
			}
			Root_curr->freq = ptrav->PNext->freq;
			Root_curr->TLeft = NULL;
			Root_curr->TRight = NULL;
			T.PRoot->TRight = Root_curr;
			T.PRoot->TLeft = ptrav->Tree_Friend;
		}
		pnn->Tree_Friend = T.PRoot;
		T.PRoot = NULL;
		L.Attach(pnn);
		L.Sort_List();
		ptemp = ptrav;
		ptrav = ptrav->PNext->PNext;
		L.PHead = ptrav;
		delete ptemp->PNext;
		delete ptemp;
		//L.Dispall();
	}
}
void Encode_Text(TNode_Text* zmblk, int ct, int Qbit, int Arr[], CList2_Text& TL)
{
	CNFreq_Text* pnn2;
	if (ct > 0)
	{
		Arr[ct - 1] = Qbit;
	}
	ct++;
	if (zmblk->TLeft == NULL && zmblk->TRight == NULL)
	{
		pnn2 = new CNFreq_Text;
		pnn2->Char = zmblk->A[0];
		for (int j = 0; j < ct - 1; j++)
		{
			pnn2->Binary[j] = Arr[j];
		}
		pnn2->count = ct - 1;
		pnn2->pnext = NULL;
		TL.Attach(pnn2);
		return;
	}
	Encode_Text(zmblk->TLeft, ct, 0, Arr, TL);
	Encode_Text(zmblk->TRight, ct, 1, Arr, TL);
}
void Encode_Image(TNode_Image* zmblk, int ct, int Qbit, int*& Arr, CList2_Image& TL,int byte_ct)
{
	CNFreq_Image* pnn2;
	if (ct > 0)
	{
		Arr[ct - 1] = Qbit;
	}
	ct++;
	if (zmblk->TLeft == NULL && zmblk->TRight == NULL)
	{
		pnn2 = new CNFreq_Image;
		pnn2->Char = zmblk->A[0];
		pnn2->Binary = new int[byte_ct];
		for (int j = 0; j < ct - 1; j++)
		{
			pnn2->Binary[j] = Arr[j];
		}
		pnn2->count = ct - 1;
		pnn2->pnext = NULL;
		TL.Attach(pnn2);
		return;
	}
	Encode_Image(zmblk->TLeft, ct, 0, Arr, TL,byte_ct);
	Encode_Image(zmblk->TRight, ct, 1, Arr, TL,byte_ct);
}
void Decrypt_Text(CList2_Text& TL, int & saved, char Chariot[])
{ 
	ifstream input_compressed;
	ofstream Decompressed_text;
	char Feed[50000];
	CNFreq_Text* Btrav;
	char Compressed_text[40096];
	int Bchar[40096];
	int curr_size=0,size_max=8,ct=0,size_ct=0,trav_ct=0;
	char Dcarry=0, DMask=1;
	int i;
	for(int run=0;Chariot[run]!='\0';run++)
	{
		Compressed_text[run]=Chariot[run];
		Compressed_text[run+1]='\0';
	}
 	input_compressed.open("C://Users//youss//Desktop//UNIVERSITY SHIT//YEAR 2//CS213 - Data Structure//Huffman Project//Text Compression File//Compressed.txt");
	if (input_compressed.is_open())
	{
		/* cout << "Compressed File Detected....." << endl;
		string Encrypted_text;
		while (getline(input_compressed, Encrypted_text))
		{
			for (i = 0;i < Encrypted_text.length();i++)
			{
				Compressed_text[i] = Encrypted_text[i];
			}
			Compressed_text[i] = '\0';
		}  */
		Decompressed_text.open("C://Users//youss//Desktop//UNIVERSITY SHIT//YEAR 2//CS213 - Data Structure//Huffman Project//Text Compression File//Decompressed.txt", ios::trunc);
		if(Decompressed_text.is_open())
		{
			cout<< "Decompression File Detected...." << endl << endl;
			for ( i = 0; Compressed_text[i]!='\0'; i++)
			{
				if(saved!=0 && Compressed_text[i+1]=='\0')
				{
					size_max=saved;
				}
				trav_ct=0;
				for (int j = 0; j < size_max; j++)
				{
					Dcarry=Compressed_text[i]&(DMask<<trav_ct);
					trav_ct++;
					if (Dcarry==0)
					{
						Bchar[curr_size]=0;
						curr_size++;
					}
					else if(Dcarry!=0)
					{
						Bchar[curr_size]=1;
						curr_size++;
					}
					Dcarry=0;
					Btrav=TL.PHead;
					while(Btrav!=NULL)
					{
						if(curr_size==Btrav->count)
						{
							for(int i=0;i<curr_size;i++)
							{
								if(Bchar[i]==Btrav->Binary[i])
								{
									ct++;
								}
							}
							if(ct==curr_size)
							{
								cout<<Btrav->Char;
								Decompressed_text<<Btrav->Char;
								curr_size=0;
							}
							ct=0;
						}

						Btrav=Btrav->pnext;
					}
				}	
			}
		}
	} 
} 
void Decompress_Image(CList2_Image& TL, int& saved, char*& Chariot,int trav)
{
	ifstream input_compressed;
	ofstream Decompressed_text;
	char* Feed = new char [trav];
	CNFreq_Image* Btrav;
	char* Compressed_text=new char[trav];
	int* Bchar=new int [trav];
	int curr_size = 0, size_max = 8, ct = 0, size_ct = 0, trav_ct = 0;
	char Dcarry = 0, DMask = 1;
	int i;
	char Ask_Dis;
	for (int run = 0; run<trav; run++)
	{
		Compressed_text[run] = Chariot[run];
	}
	input_compressed.open("C://Users//youss//Desktop//UNIVERSITY SHIT//YEAR 2//CS213 - Data Structure//Huffman Project//Image Compression File//Compressed//Test3-Compressed_Output.bmp", ifstream::binary);
	if (input_compressed.is_open())
	{
		/* cout << "Compressed File Detected....." << endl;
		string Encrypted_text;
		while (getline(input_compressed, Encrypted_text))
		{
			for (i = 0;i < Encrypted_text.length();i++)
			{
				Compressed_text[i] = Encrypted_text[i];
			}
			Compressed_text[i] = '\0';
		}  */
		Decompressed_text.open("C://Users//youss//Desktop//UNIVERSITY SHIT//YEAR 2//CS213 - Data Structure//Huffman Project//Image Compression File//Decompressed//Test3-Decompressed_Output.bmp", ofstream::binary);
		if (Decompressed_text.is_open())
		{
			cout << "Decompression File Detected...." << endl << endl;
			cout<<"Display Decompressed Image? (Y/N): ";
			cin>>Ask_Dis;
			cout<<endl<<endl;
			for (i = 0;i<trav; i++)
			{
				if (saved != 0 && i + 1 == trav)
				{
					size_max = saved;
				}
				trav_ct = 0;
				for (int j = 0; j < size_max; j++)
				{
					Dcarry = Compressed_text[i] & (DMask << trav_ct);
					trav_ct++;
					if (Dcarry == 0)
					{
						Bchar[curr_size] = 0;
						curr_size++;
					}
					else if (Dcarry != 0)
					{
						Bchar[curr_size] = 1;
						curr_size++;
					}
					Dcarry = 0;
					Btrav = TL.PHead;
					while (Btrav != NULL)
					{
						if (curr_size == Btrav->count)
						{
							for (int i = 0; i < curr_size; i++)
							{
								if (Bchar[i] == Btrav->Binary[i])
								{
									ct++;
								}
							}
							if (ct == curr_size)
							{
								if(Ask_Dis=='y')
								{
									cout << Btrav->Char;
								}
								Decompressed_text.write(&Btrav->Char, 1); 
								curr_size = 0;
							}
							ct = 0;
						}

						Btrav = Btrav->pnext;
					}
				}
			}
		}
	}
}
void Encrypt_Text(CList2_Text& TL, char input[], int& saved)
{
	ofstream compressed;
	CNFreq_Text* Btrav;
	char Chariot[10000];
	int Chariot_trav=0;
	int i, unit, ct = 0,trav=0;
	char Ecarry = 0, EMask = 1;
    char ask_decrypt='d';
	compressed.open("C://Users//youss//Desktop//UNIVERSITY SHIT//YEAR 2//CS213 - Data Structure//Huffman Project//Text Compression File//Compressed.txt", ios::trunc);
	if (compressed.is_open())
	{
		cout << "Compression File Detected....." << endl << endl;
		for (i = 0;input[i] != '\0';i++)
		{
			Btrav = TL.PHead;
			while (Btrav != NULL)
			{
				if (input[i] == Btrav->Char)
				{
					for (unit = 0; unit<Btrav->count ;unit++)
					{
						if (Btrav->Binary[unit] == 1)
						{
							Ecarry = Ecarry | (EMask << ct);
						}
						ct++;
						if (ct == 8)
						{
							cout <<"["<< Ecarry <<"]";
							compressed << Ecarry;
							Chariot[Chariot_trav]=Ecarry;
							Chariot_trav++;
							ct = 0;
							Ecarry = 0;
						}
					}
				}
				Btrav = Btrav->pnext;
			}
		}
		if(ct!=0 && ct<8)
		{
			saved=ct;
			cout <<"["<< Ecarry <<"]";
			compressed << Ecarry;
			Chariot[Chariot_trav]=Ecarry;
			Chariot_trav++;
		}
		cout<<endl; 
		Chariot[Chariot_trav]='\0';
        cout<<endl;
        cout << "Press D to Decompress: ";
        cin >> ask_decrypt;
        if (ask_decrypt == 'd')
        {
            Decrypt_Text(TL,saved,Chariot);
        } 
        cout<<endl;
	}
} 
void Compress_Image(CList2_Image& TL, char*& img_data, int& saved, int byte_ct)
{
	ofstream compressed;
	CNFreq_Image* Btrav;
	char* Chariot=new char [byte_ct];
	int Chariot_trav = 0;
	int i, unit, ct = 0, trav = 0;
	char Ecarry = 0, EMask = 1;
	char ask_decrypt = 'd';
	char ask_ASCII;
	compressed.open("C://Users//youss//Desktop//UNIVERSITY SHIT//YEAR 2//CS213 - Data Structure//Huffman Project//Image Compression File//Compressed//Test3-Compressed_Output.bmp", ofstream::binary);
	if (compressed.is_open())
	{
		cout << "Compression File Detected....." << endl << endl;
		cout<<"Display ASCII? (Y/N): ";
		cin>>ask_ASCII;
		for (i = 0; i<byte_ct ; i++)
		{
			Btrav = TL.PHead;
			while (Btrav != NULL)
			{
				if (img_data[i] == Btrav->Char)
				{
					for (unit = 0; unit < Btrav->count; unit++)
					{
						if (Btrav->Binary[unit] == 1)
						{
							Ecarry = Ecarry | (EMask << ct);
						}
						ct++;
						if (ct == 8)
						{
							if(ask_ASCII=='y')
							{
								cout << "[" << Ecarry << "]";
							}
							compressed.write(&Ecarry, 1);
							Chariot[Chariot_trav] = Ecarry;
							Chariot_trav++;
							ct = 0;
							Ecarry = 0;
						}
					}
				}
				Btrav = Btrav->pnext;
			}
		}
		if (ct != 0 && ct < 8)
		{
			saved = ct;
			if(ask_ASCII=='y')
			{
				cout << "[" << Ecarry << "]";
			}
			compressed.write(&Ecarry, 1);
			Chariot[Chariot_trav] = Ecarry;
			Chariot_trav++;
		}
		cout << endl<<endl;
		cout << "Press D to Decompress: ";
		cin >> ask_decrypt;
		if (ask_decrypt == 'd')
		{
			Decompress_Image(TL, saved, Chariot,Chariot_trav);
		}
	}
}
int main()
{
    cout<<endl<<endl;
	cout << "                             -----------------[ Welcome To The State of The Art Compression Program ]-----------------                                " << endl;
	cout<<endl<<endl;
	char Ask_TorI;
	cout<<"Choose what file type to compress (T or I): ";
	cin>>Ask_TorI;
	cout<<endl;
	if(Ask_TorI=='t')
	{
		cout<<"Compressing Text..."<<endl;
		char Input[40096];
		int Arr[40096];
		ifstream Input_text;
		CList_Text L;
		CTree_Text T;
		CList2_Text TL;
		CNode_Text* pnn, * Ptrav;
		int flag = 0, ctfreq = 1, i;
		int save_curr=0;
		char ask_encode, ask_encrypt, ask_decrypt;
		Input_text.open("C://Users//youss//Desktop//UNIVERSITY SHIT//YEAR 2//CS213 - Data Structure//Huffman Project//Text Compression File//Input.txt");
		if (Input_text.is_open())
		{
			cout << "Text Input File Detected......" << endl << endl;
			string line;
			while (getline(Input_text, line))
			{
				for (i = 0;i < line.length();i++)
				{
					Input[i] = line[i];
				}
				Input[i] = '\0';
			}
		}
		cout<<"Input Text: "<<endl;
		for(i=0;i<10000;i++)
		{
			cout<<Input[i];
		}
		for (int i = 0; ;i++)
		{
			pnn = new CNode_Text;
			if (Input[i] == '\0')
			{
				break;
			}
			Ptrav = L.PHead;
			while (Ptrav != NULL)
			{
				if (Ptrav->A[0] == Input[i])
				{
					flag = 1;
				}
				Ptrav = Ptrav->PNext;
			}
			if (flag == 0)
			{
				ctfreq = 1;
				pnn->A[0] = Input[i];
				pnn->A[1] = '\0';
				for (int j = i + 1; ;j++)
				{
					if (Input[j] == '\0')
					{
						break;
					}
					if (Input[j] == Input[i])
					{
						ctfreq++;
					}
				}
				pnn->freq = ctfreq;
				pnn->PNext = NULL;
				pnn->Tree_Friend = NULL;
				L.Attach(pnn);
			}
			else
			{
				flag = 0;
			}

		}
		L.Sort_List();
		Merge_Text(L, T);
		//T.DispTree(L.PHead->Tree_Friend);
		TNode_Text* zmblk;
		zmblk = L.PHead->Tree_Friend;
		cout<<endl<<endl;
		cout << "Press E To Encode: ";
		cin >> ask_encode;
		if (ask_encode == 'e')
		{
			Encode_Text(zmblk, 0, 0, Arr, TL);
		}
		cout << endl;
		TL.Dispall();
		cout << "Press C To Compress: ";
		cin >> ask_encrypt;
		if (ask_encrypt == 'c')
		{
			Encrypt_Text(TL, Input, save_curr);
		}
		cout << endl << endl;
		/* cout << "Press D to Decompress: ";
		cin >> ask_decrypt;
		if (ask_decrypt == 'd')
		{
			Decrypt(TL, save_curr); 
		} 
		cout<<endl; */
		cout<<endl<<endl;
		cout<<"Status: " <<"Done";
	}
	else if(Ask_TorI=='i')
	{
	char ask_encode_img;
		char ask_compress_img;
		char ask_decompress_img;
		char read;
		char Input[40096];
		int Arr[40096];
		ifstream Input_text;
		CList_Image L;
		CTree_Image T;
		CList2_Image TL;
		CNode_Image* pnn, * Ptrav;
		int flag = 0, ctfreq = 1, i;
		int save_curr = 0;
		ifstream Input_File("C://Users//youss//Desktop//UNIVERSITY SHIT//YEAR 2//CS213 - Data Structure//Huffman Project//Image Compression File//Input//Test3-Input.bmp", ifstream::binary);
		cout << "Image Detected...." << endl;
		Input_File.seekg(0, Input_File.end);
		int byte_ct = Input_File.tellg();
		char* img_data = new char[byte_ct];
		cout << "File Size: " << byte_ct << endl;
		Input_File.seekg(0, Input_File.beg);
		for (int i = 0; i < byte_ct; i++)
		{
			Input_File.read(&read, 1);
			img_data[i] = read;
		}
		for (int i = 0; i < byte_ct; i++)
		{
			Ptrav = L.PHead;
			while (Ptrav != NULL)
			{
				if (Ptrav->A[0] == img_data[i])
				{
					flag = 1;
				}
				Ptrav = Ptrav->PNext;
			}
			if (flag == 0)
			{
				pnn = new CNode_Image;
				pnn->A = new char[byte_ct];
				ctfreq = 1;
				pnn->A[0] = img_data[i];
				pnn->img_limit++;
				for (int j = i + 1; j < byte_ct; j++)
				{
					if (img_data[j] == img_data[i])
					{
						ctfreq++;
					}
				}
				pnn->freq = ctfreq;
				pnn->PNext = NULL;
				pnn->Tree_Friend = NULL;
				L.Attach(pnn);
			}
			else
			{
				flag = 0;
			}
		}
		L.Sort_List();
		Merge_Image(L, byte_ct, T); 
		TNode_Image* zmblk2;
		zmblk2 = L.PHead->Tree_Friend;
		int* Arr2 = new int [byte_ct];
		/* T.DispTree(L.PHead->Tree_Friend); */
		cout<<endl;
		cout<<"Press E To Encode Image: ";
		cin>>ask_encode_img;
		if(ask_encode_img=='e')
		{
			Encode_Image(zmblk2, 0, 0, Arr2, TL,byte_ct);
		}
		cout << endl;
		TL.Dispall();
		cout<<"Press C To Compress Image: ";
		cin>>ask_compress_img;
		if(ask_compress_img=='c')
		{
			Compress_Image(TL, img_data, save_curr,byte_ct);
		}
		cout<<endl<<endl;
		cout<<"Status: " <<"Done";
	}
	return 0;
}